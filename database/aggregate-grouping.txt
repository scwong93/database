1.
MIN - the lowest card value in a deck of cards
MAX - the highest card value in a deck of cards
AVG - the median card value in a deck of cards
COUNT - the number of cards in a deck
SUM - the total added value of numbered cards

2.
SELECT SUM(amount)
FROM donations;
= 993

SELECT SUM(amount) AS total, donor
FROM donations
GROUP BY donor;
=   total   |   donor
----------+------------
  25.0000 | Bran
  60.0000 | Arya
 173.0000 | Daenerys
  30.0000 | Ygritte
  50.0000 | Tormund
  33.0000 | Sansa
  20.0000 | Samwell
  45.0000 | Melisandre
  20.0000 | Bronn
  90.0000 | Missandei
 120.0000 | Tyrion
   7.0000 | Gilly
  75.0000 | Brienne
 120.0000 | Margaery
  25.0000 | Jon
  10.0000 | Daario
  20.0000 | Theon
  70.0000 | Petyr

SELECT AVG(amount) AS average_donation, donor
FROM donations
GROUP BY donor;
=    average_donation   |   donor
----------------------+------------
  25.0000000000000000 | Bran
  20.0000000000000000 | Arya
  86.5000000000000000 | Daenerys
  30.0000000000000000 | Ygritte
  50.0000000000000000 | Tormund
  33.0000000000000000 | Sansa
  20.0000000000000000 | Samwell
  45.0000000000000000 | Melisandre
  20.0000000000000000 | Bronn
  22.5000000000000000 | Missandei
  40.0000000000000000 | Tyrion
   7.0000000000000000 | Gilly
  75.0000000000000000 | Brienne
 120.0000000000000000 | Margaery
  25.0000000000000000 | Jon
  10.0000000000000000 | Daario
  10.0000000000000000 | Theon
  70.0000000000000000 | Petyr

SELECT COUNT(amount)
FROM donations
WHERE amount > 100;
=  count
-------
     2

SELECT MAX(amount)
FROM donations;
=   max
----------
 120.0000

SELECT MIN(amount)
FROM donations;
=   min
--------
 5.0000

3.
ORDER BY statement with optional default ASEC or DESC

4. To give a lower tiered prize by offsetting the first tier winners

5. It sorts the data in an understandable manner, either by ascending or descending order.

6. Essentially HAVING and WHERE are the same if GROUP BY clause is not present. When it is present, HAVING takes a condition that will apply to the GROUP BY clause only.

7.
SELECT SUM(amount) AS total, id
FROM payment
HAVING total > 200;

8.
SELECT *
FROM cats
ORDER BY adoption_date;

SELECT date, adopter, cat
FROM adoptions
ORDER BY date DESC
LIMIT 5;

SELECT name, gender, age
FROM cats
WHERE age >= 2;

SELECT SUM(amount) AS total_donation, donor
FROM donations
GROUP BY total_donation
ORDER BY total_donation
LIMIT 5;

SELECT SUM(amount) as total_donation, donor
FROM donations
GROUP BY total_donation
ORDER BY total_donation
LIMIT 10 OFFSET 5;
